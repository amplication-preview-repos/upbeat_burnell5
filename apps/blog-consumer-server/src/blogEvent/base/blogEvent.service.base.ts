/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, BlogEvent as PrismaBlogEvent } from "@prisma/client";

export class BlogEventServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.BlogEventCountArgs, "select">
  ): Promise<number> {
    return this.prisma.blogEvent.count(args);
  }

  async blogEvents<T extends Prisma.BlogEventFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogEventFindManyArgs>
  ): Promise<PrismaBlogEvent[]> {
    return this.prisma.blogEvent.findMany<Prisma.BlogEventFindManyArgs>(args);
  }
  async blogEvent<T extends Prisma.BlogEventFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogEventFindUniqueArgs>
  ): Promise<PrismaBlogEvent | null> {
    return this.prisma.blogEvent.findUnique(args);
  }
  async createBlogEvent<T extends Prisma.BlogEventCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogEventCreateArgs>
  ): Promise<PrismaBlogEvent> {
    return this.prisma.blogEvent.create<T>(args);
  }
  async updateBlogEvent<T extends Prisma.BlogEventUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogEventUpdateArgs>
  ): Promise<PrismaBlogEvent> {
    return this.prisma.blogEvent.update<T>(args);
  }
  async deleteBlogEvent<T extends Prisma.BlogEventDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.BlogEventDeleteArgs>
  ): Promise<PrismaBlogEvent> {
    return this.prisma.blogEvent.delete(args);
  }
}
